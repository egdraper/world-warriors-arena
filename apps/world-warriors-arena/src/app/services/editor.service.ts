import { Injectable } from "@angular/core";
import { GSM } from "../app.service.manager";
import { getBackgroundCollection, getObjectCollection } from "../game-assets/tile-assets.db";
import { DefaultMapSettings, SpriteBackgroundTile, SpriteTile } from "../models/cell.model";
import { GameSettings } from "../models/game-settings";
import { PageTransitionMarker } from "../models/markers-icons";
import { RandomMapGenerator } from "../utils/random-map-generator";

@Injectable()
export class EditorService {
  public selectedAsset: SpriteTile
  public selectedGrowableAsset: string = "DrawableDirtRoad"
  public layerID = 1
  public backgroundDirty = false
 

  public findBackgroundCollection(category: string): SpriteBackgroundTile[] {
    return getBackgroundCollection(category)
  }

  public findObjectCollection(category: string): SpriteTile[] {
    return getObjectCollection(category)
  }
 
  public findBackgroundAsset(category: string, tileId: string): SpriteBackgroundTile {
    return getBackgroundCollection(category).find((tile: SpriteBackgroundTile) => tile.id === tileId)
  } 
 
  public findObjectAsset(category: string, tileId: string): SpriteTile {
    return getObjectCollection(category).find((tile: SpriteBackgroundTile) => tile.id === tileId)
  } 

  public generateRandomCoreMap(): void {
    const mapGenerator = new RandomMapGenerator()

    const mapDetails: DefaultMapSettings = {
      autoGeneratedMap: true,
      backgroundTypeId: "greenGrass",
      terrainTypeId: "DrawableTrees",
      inverted: false,
      pathTypeId: "DrawableDirtRoad",
    }

    mapGenerator.generateMap(45, 45, mapDetails)
    GSM.Canvas.setupCanvases()

    // CLEANUP - Rethink the "Dirty" locations, if they should be in drawing service or where they are
    GSM.Assets.obstaclesDirty = true
    GSM.Editor.backgroundDirty = true

    // CLEANUP - Needs to be moved into somewhere that re-draws
    const centerCell = GSM.Map.activeGrid.getGridCellByCoordinate(Math.floor(GSM.Canvas.canvasSizeX / 2), Math.floor(GSM.Canvas.canvasSizeY / 2))
    GSM.Canvas.centerPointX = centerCell.posX * GameSettings.scale
    GSM.Canvas.centerPointY = centerCell.posY * GameSettings.scale

    GSM.Draw.blackOutFogPainter.paint()
    GSM.FogOfWar.createCellLines()
  }

  public generateRandomAttachmentMap(markerIcon: PageTransitionMarker): void {
    const mapGenerator = new RandomMapGenerator()
   
    // allow for override
    const mapDetails: DefaultMapSettings = {
      autoGeneratedMap: true,
      backgroundTypeId: "greenGrass",
      terrainTypeId: "DrawableTrees",
      inverted: false,
      pathTypeId: "DrawableDirtRoad"
    }
   
    mapGenerator.generateAttachmentMap(GSM.Map.activeGrid, mapDetails, markerIcon)
    GSM.Canvas.setupCanvases()

    // CLEANUP - Rethink the "Dirty" locations, if they should be in drawing service or where they are
    GSM.Assets.obstaclesDirty = true
    GSM.Editor.backgroundDirty = true

    // CLEANUP - Needs to be moved into somewhere that re-draws
    const centerCell = GSM.Map.activeGrid.getGridCellByCoordinate(Math.floor(GSM.Canvas.canvasSizeX / 2), Math.floor(GSM.Canvas.canvasSizeY / 2))
    GSM.Canvas.centerPointX = centerCell.posX * GameSettings.scale
    GSM.Canvas.centerPointY = centerCell.posY * GameSettings.scale

    GSM.Draw.blackOutFogPainter.paint()
    GSM.FogOfWar.createCellLines()
  }

} 